generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  emailVerified      Boolean              @default(false)
  passwordHash       String?
  authProvider       String               @default("local")
  name               String
  firstName          String?
  lastName           String?
  avatarUrl          String?
  phone              String?
  phoneVerified      Boolean              @default(false)
  role               String               @default("user")
  permissions        String[]
  status             String               @default("active")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  lastLoginAt        DateTime?
  lastActiveAt       DateTime?
  loginCount         Int                  @default(0)
  sessionVersion     Int                  @default(1)
  twoFactorEnabled   Boolean              @default(false)
  twoFactorSecret    String?
  ipLastLogin        String?
  userAgentLastLogin String?
  locale             String?
  timezone           String?
  preferences        Json?
  metadata           Json?
  accounts           Account[]
  emailVerifications EmailVerification[]
  memberships        Membership[]
  onboardingProgress OnboardingProgress[]
  passwordResets     PasswordReset[]
  sessions           Session[]
  userPreferences    UserPreferences?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Organization {
  id             String       @id @default(cuid())
  name           String
  slug           String       @unique
  logoUrl        String?
  domain         String?
  plan           String       @default("free")
  status         String       @default("active")
  billingEmail   String?
  trialEndsAt    DateTime?
  subscriptionId String?
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  memberships    Membership[]

  @@map("organizations")
}

model Membership {
  id           String       @id @default(cuid())
  userId       String
  orgId        String
  role         String       @default("member")
  permissions  String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("memberships")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model OnboardingStep {
  id          String               @id @default(cuid())
  key         String               @unique
  title       String
  description String?
  order       Int
  required    Boolean              @default(false)
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  progress    OnboardingProgress[]

  @@map("onboarding_steps")
}

model OnboardingProgress {
  id          String         @id @default(cuid())
  userId      String
  stepId      String
  completed   Boolean        @default(false)
  skipped     Boolean        @default(false)
  data        Json?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  step        OnboardingStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stepId])
  @@map("onboarding_progress")
}

model UserPreferences {
  id                    String    @id @default(cuid())
  userId                String    @unique
  onboardingCompleted   Boolean   @default(false)
  onboardingCompletedAt DateTime?
  theme                 String    @default("light")
  language              String    @default("en")
  timezone              String    @default("UTC")
  emailNotifications    Json      @default("{}")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}
